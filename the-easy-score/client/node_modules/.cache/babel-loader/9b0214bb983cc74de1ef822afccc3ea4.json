{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('chart.js')) : typeof define === 'function' && define.amd ? define(['chart.js'], factory) : factory(global.Chart);\n})(this, function (Chart) {\n  'use strict';\n\n  Chart = Chart && Chart.hasOwnProperty('default') ? Chart['default'] : Chart;\n  /**\r\n   * @module Options\r\n   */\n\n  'use strict';\n\n  var defaults = {\n    /**\r\n     * The font options used to draw the label text.\r\n     * @member {Object|Array|Function}\r\n     * @prop {String} font.family - defaults to Chart.defaults.global.defaultFontFamily\r\n     * @prop {Number} font.lineHeight - defaults to 1.2\r\n     * @prop {Number} font.size - defaults to Chart.defaults.global.defaultFontSize\r\n     * @prop {String} font.style - defaults to Chart.defaults.global.defaultFontStyle\r\n     * @prop {Number} font.weight - defaults to 'normal'\r\n     * @default Chart.defaults.global.defaultFont.*\r\n     */\n    font: {\n      family: undefined,\n      lineHeight: 1.2,\n      size: undefined,\n      style: undefined,\n      weight: null\n    }\n  };\n  'use strict';\n\n  var helpers$1 = Chart.helpers;\n  var utils = {\n    parseFont: function (value) {\n      var global = Chart.defaults.global;\n      var size = helpers$1.valueOrDefault(value.size, global.defaultFontSize);\n      var font = {\n        family: helpers$1.valueOrDefault(value.family, global.defaultFontFamily),\n        lineHeight: helpers$1.options.toLineHeight(value.lineHeight, size),\n        size: size,\n        style: helpers$1.valueOrDefault(value.style, global.defaultFontStyle),\n        weight: helpers$1.valueOrDefault(value.weight, null),\n        string: ''\n      };\n      font.string = utils.toFontString(font);\n      return font;\n    },\n    toFontString: function (font) {\n      if (!font || helpers$1.isNullOrUndef(font.size) || helpers$1.isNullOrUndef(font.family)) {\n        return null;\n      }\n\n      return (font.style ? font.style + ' ' : '') + (font.weight ? font.weight + ' ' : '') + font.size + 'px ' + font.family;\n    },\n    textSize: function (ctx, labels) {\n      var items = [].concat(labels);\n      var ilen = items.length;\n      var prev = ctx.font;\n      var width = 0;\n      var height = 0;\n      var i;\n\n      for (i = 0; i < ilen; ++i) {\n        ctx.font = items[i].font.string;\n        width = Math.max(ctx.measureText(items[i].text).width, width);\n        height += items[i].font.lineHeight;\n      }\n\n      ctx.font = prev;\n      var result = {\n        height: height,\n        width: width\n      };\n      return result;\n    }\n  };\n  'use strict';\n\n  var helpers = Chart.helpers;\n  Chart.defaults.global.plugins.doughnutlabel = defaults;\n\n  function drawDoughnutLabel(chart, options) {\n    if (options && options.labels && options.labels.length > 0) {\n      var ctx = chart.ctx;\n      var resolve = helpers.options.resolve;\n      var innerLabels = [];\n      options.labels.forEach(function (label) {\n        var text = typeof label.text === 'function' ? label.text(chart) : label.text;\n        var innerLabel = {\n          text: text,\n          font: utils.parseFont(resolve([label.font, options.font, {}], ctx, 0)),\n          color: resolve([label.color, options.color, Chart.defaults.global.defaultFontColor], ctx, 0)\n        };\n        innerLabels.push(innerLabel);\n      });\n      var textAreaSize = utils.textSize(ctx, innerLabels); // Calculate the adjustment ratio to fit the text area into the doughnut inner circle\n\n      var hypotenuse = Math.sqrt(Math.pow(textAreaSize.width, 2) + Math.pow(textAreaSize.height, 2));\n      var innerDiameter = chart.innerRadius * 2;\n      var fitRatio = innerDiameter / hypotenuse; // Adjust the font if necessary and recalculate the text area after applying the fit ratio\n\n      if (fitRatio < 1) {\n        innerLabels.forEach(function (innerLabel) {\n          innerLabel.font.size = Math.floor(innerLabel.font.size * fitRatio);\n          innerLabel.font.lineHeight = undefined;\n          innerLabel.font = utils.parseFont(resolve([innerLabel.font, {}], ctx, 0));\n        });\n        textAreaSize = utils.textSize(ctx, innerLabels);\n      }\n\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle'; // The center of the inner circle\n\n      var centerX = (chart.chartArea.left + chart.chartArea.right) / 2;\n      var centerY = (chart.chartArea.top + chart.chartArea.bottom) / 2; // The top Y coordinate of the text area\n\n      var topY = centerY - textAreaSize.height / 2;\n      var i;\n      var ilen = innerLabels.length;\n      var currentHeight = 0;\n\n      for (i = 0; i < ilen; ++i) {\n        ctx.fillStyle = innerLabels[i].color;\n        ctx.font = innerLabels[i].font.string; // The Y center of each line\n\n        var lineCenterY = topY + innerLabels[i].font.lineHeight / 2 + currentHeight;\n        currentHeight += innerLabels[i].font.lineHeight; // Draw each line of text\n\n        ctx.fillText(innerLabels[i].text, centerX, lineCenterY);\n      }\n    }\n  }\n\n  Chart.plugins.register({\n    id: 'doughnutlabel',\n    beforeDatasetDraw: function (chart, args, options) {\n      drawDoughnutLabel(chart, options);\n    }\n  });\n});","map":{"version":3,"sources":["/Users/sam4munro/Desktop/webdev/portfolio/easyscore/the-easy-score/node_modules/chartjs-plugin-doughnutlabel/dist/chartjs-plugin-doughnutlabel.js"],"names":["global","factory","exports","module","require","define","amd","Chart","hasOwnProperty","defaults","font","family","undefined","lineHeight","size","style","weight","helpers$1","helpers","utils","parseFont","value","valueOrDefault","defaultFontSize","defaultFontFamily","options","toLineHeight","defaultFontStyle","string","toFontString","isNullOrUndef","textSize","ctx","labels","items","concat","ilen","length","prev","width","height","i","Math","max","measureText","text","result","plugins","doughnutlabel","drawDoughnutLabel","chart","resolve","innerLabels","forEach","label","innerLabel","color","defaultFontColor","push","textAreaSize","hypotenuse","sqrt","pow","innerDiameter","innerRadius","fitRatio","floor","textAlign","textBaseline","centerX","chartArea","left","right","centerY","top","bottom","topY","currentHeight","fillStyle","lineCenterY","fillText","register","id","beforeDatasetDraw","args"],"mappings":"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","sourcesContent":["(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(require('chart.js')) :\n\ttypeof define === 'function' && define.amd ? define(['chart.js'], factory) :\n\t(factory(global.Chart));\n}(this, (function (Chart) { 'use strict';\n\nChart = Chart && Chart.hasOwnProperty('default') ? Chart['default'] : Chart;\n\n/**\r\n * @module Options\r\n */\r\n\r\n'use strict';\r\n\r\nvar defaults = {\r\n\t/**\r\n\t * The font options used to draw the label text.\r\n\t * @member {Object|Array|Function}\r\n\t * @prop {String} font.family - defaults to Chart.defaults.global.defaultFontFamily\r\n\t * @prop {Number} font.lineHeight - defaults to 1.2\r\n\t * @prop {Number} font.size - defaults to Chart.defaults.global.defaultFontSize\r\n\t * @prop {String} font.style - defaults to Chart.defaults.global.defaultFontStyle\r\n\t * @prop {Number} font.weight - defaults to 'normal'\r\n\t * @default Chart.defaults.global.defaultFont.*\r\n\t */\r\n\tfont: {\r\n\t\tfamily: undefined,\r\n\t\tlineHeight: 1.2,\r\n\t\tsize: undefined,\r\n\t\tstyle: undefined,\r\n\t\tweight: null\r\n\t}\r\n};\n\n'use strict';\r\n\r\nvar helpers$1 = Chart.helpers;\r\n\r\nvar utils = {\r\n\r\n\tparseFont: function(value) {\r\n\t\tvar global = Chart.defaults.global;\r\n\t\tvar size = helpers$1.valueOrDefault(value.size, global.defaultFontSize);\r\n\t\tvar font = {\r\n\t\t\tfamily: helpers$1.valueOrDefault(value.family, global.defaultFontFamily),\r\n\t\t\tlineHeight: helpers$1.options.toLineHeight(value.lineHeight, size),\r\n\t\t\tsize: size,\r\n\t\t\tstyle: helpers$1.valueOrDefault(value.style, global.defaultFontStyle),\r\n\t\t\tweight: helpers$1.valueOrDefault(value.weight, null),\r\n\t\t\tstring: ''\r\n\t\t};\r\n\r\n\t\tfont.string = utils.toFontString(font);\r\n\t\treturn font;\r\n\t},\r\n\r\n\ttoFontString: function(font) {\r\n\t\tif (!font || helpers$1.isNullOrUndef(font.size) || helpers$1.isNullOrUndef(font.family)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\treturn (font.style ? font.style + ' ' : '')\r\n\t\t\t+ (font.weight ? font.weight + ' ' : '')\r\n\t\t\t+ font.size + 'px '\r\n\t\t\t+ font.family;\r\n\t},\r\n\r\n\ttextSize: function(ctx, labels) {\r\n\t\tvar items = [].concat(labels);\r\n\t\tvar ilen = items.length;\r\n\t\tvar prev = ctx.font;\r\n\t\tvar width = 0;\r\n\t\tvar height = 0;\r\n\t\tvar i;\r\n\r\n\t\tfor (i = 0; i < ilen; ++i) {\r\n\t\t\tctx.font = items[i].font.string;\r\n\t\t\twidth = Math.max(ctx.measureText(items[i].text).width, width);\r\n\t\t\theight += items[i].font.lineHeight;\r\n\t\t}\r\n\r\n\t\tctx.font = prev;\r\n\r\n\t\tvar result = {\r\n\t\t\theight: height,\r\n\t\t\twidth: width\r\n\t\t};\r\n\t\treturn result;\r\n\t}\r\n\r\n};\n\n'use strict';\r\n\r\nvar helpers = Chart.helpers;\r\n\r\nChart.defaults.global.plugins.doughnutlabel = defaults;\r\n\r\nfunction drawDoughnutLabel(chart, options) {\r\n\tif (options && options.labels && options.labels.length > 0) {\r\n\t\tvar ctx = chart.ctx;\r\n\t\tvar resolve = helpers.options.resolve;\r\n\r\n\t\tvar innerLabels = [];\r\n\t\toptions.labels.forEach(function(label) {\r\n\t\t\tvar text = typeof(label.text) === 'function' ? label.text(chart) : label.text;\r\n\t\t\tvar innerLabel = {\r\n\t\t\t\ttext: text,\r\n\t\t\t\tfont: utils.parseFont(resolve([label.font, options.font, {}], ctx, 0)),\r\n\t\t\t\tcolor: resolve([label.color, options.color, Chart.defaults.global.defaultFontColor], ctx, 0)\r\n\t\t\t};\r\n\t\t\tinnerLabels.push(innerLabel);\r\n\t\t});\r\n\r\n\t\tvar textAreaSize = utils.textSize(ctx, innerLabels);\r\n\r\n\t\t// Calculate the adjustment ratio to fit the text area into the doughnut inner circle\r\n\t\tvar hypotenuse = Math.sqrt(Math.pow(textAreaSize.width, 2) + Math.pow(textAreaSize.height, 2));\r\n\t\tvar innerDiameter = chart.innerRadius * 2;\r\n\t\tvar fitRatio = innerDiameter / hypotenuse;\r\n\r\n\t\t// Adjust the font if necessary and recalculate the text area after applying the fit ratio\r\n\t\tif (fitRatio < 1) {\r\n\t\t\tinnerLabels.forEach(function(innerLabel) {\r\n\t\t\t\tinnerLabel.font.size = Math.floor(innerLabel.font.size * fitRatio);\r\n\t\t\t\tinnerLabel.font.lineHeight = undefined;\r\n\t\t\t\tinnerLabel.font = utils.parseFont(resolve([innerLabel.font, {}], ctx, 0));\r\n\t\t\t});\r\n\r\n\t\t\ttextAreaSize = utils.textSize(ctx, innerLabels);\r\n\t\t}\r\n\r\n\t\tctx.textAlign = 'center';\r\n\t\tctx.textBaseline = 'middle';\r\n\r\n\t\t// The center of the inner circle\r\n\t\tvar centerX = ((chart.chartArea.left + chart.chartArea.right) / 2);\r\n\t\tvar centerY = ((chart.chartArea.top + chart.chartArea.bottom) / 2);\r\n\r\n\t\t// The top Y coordinate of the text area\r\n\t\tvar topY = centerY - textAreaSize.height / 2;\r\n\r\n\t\tvar i;\r\n\t\tvar ilen = innerLabels.length;\r\n\t\tvar currentHeight = 0;\r\n\t\tfor (i = 0; i < ilen; ++i) {\r\n\t\t\tctx.fillStyle = innerLabels[i].color;\r\n\t\t\tctx.font = innerLabels[i].font.string;\r\n\r\n\t\t\t// The Y center of each line\r\n\t\t\tvar lineCenterY = topY + innerLabels[i].font.lineHeight / 2 + currentHeight;\r\n\t\t\tcurrentHeight += innerLabels[i].font.lineHeight;\r\n\r\n\t\t\t// Draw each line of text\r\n\t\t\tctx.fillText(innerLabels[i].text, centerX, lineCenterY);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nChart.plugins.register({\r\n\tid: 'doughnutlabel',\r\n\tbeforeDatasetDraw: function(chart, args, options) {\r\n\t\tdrawDoughnutLabel(chart, options);\r\n\t}\r\n});\n\n})));\n"]},"metadata":{},"sourceType":"script"}